version: 2.1

orbs:
  # Replace this with your own!
  cloudrail: indeni/cloudrail@<<pipeline.parameters.dev-orb-version>>
  orb-tools: circleci/orb-tools@10.0
  bats: circleci/bats@1.0
  shellcheck: circleci/shellcheck@2.0

# Pipeline Parameters
parameters:
  run-integration-tests:
    description: An internal flag to prevent integration test from running before a development version has been created.
    type: boolean
    default: false
  dev-orb-version:
    description: >
      The development version of the orb to test.
      This value is automatically adjusted by the "trigger-integration-tests-workflow" job to correspond with the specific version created by the commit and should not be edited.
      A "dev:alpha" version must exist for the initial pipeline run.
    type: string
    default: "dev:alpha"

jobs:
  integration-test-1-prep:
    working_directory: /tmp/test_1
    docker:
      - image: hashicorp/terraform:0.13.5
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd src/tests/sample_tf
            terraform init -input=false
            AWS_REGION=us-east-1 terraform plan -out plan.out
      - persist_to_workspace:
          root: .
          paths:
            - .
  # Test regular usage, no JUnit
  integration-test-1-actual:
    working_directory: /tmp/test_1
    docker:
      - image: indeni/cloudrail-cli:latest
    steps:
      - attach_workspace:
          at: .
      - cloudrail/scan_terraform:
          cloudrail_api_key: $TEST_CLOUDRAIL_API_KEY
          cloudrail_api_key_envvar_name: TEST_CLOUDRAIL_API_KEY
          cloud-account-id: $TEST_CLOUDRAIL_ACCOUNT_ID
          plan_output_file: src/tests/sample_tf/plan.out
          tf_directory: src/tests/sample_tf
  integration-test-2-prep:
    working_directory: /tmp/test_2
    docker:
      - image: hashicorp/terraform:0.13.5
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd src/tests/sample_tf
            terraform init -input=false
            AWS_REGION=us-east-1 terraform plan -out plan.out
      - persist_to_workspace:
          root: .
          paths:
            - .
  # Test JUnit output
  integration-test-2-actual:
    working_directory: /tmp/test_2
    docker:
      - image: indeni/cloudrail-cli:latest
    steps:
      - attach_workspace:
          at: .
      - cloudrail/scan_terraform:
          cloudrail_api_key: $TEST_CLOUDRAIL_API_KEY
          cloudrail_api_key_envvar_name: TEST_CLOUDRAIL_API_KEY
          cloud-account-id: $TEST_CLOUDRAIL_ACCOUNT_ID
          plan_output_file: src/tests/sample_tf/plan.out
          tf_directory: src/tests/sample_tf
          junit-output: true
workflows:
  test-pack:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint # Lint Yaml files
      - orb-tools/pack # Pack orb source
      # Publish development version(s) of the orb.
      - orb-tools/publish-dev:
          orb-name: indeni/cloudrail
          context: orb-publishing
          requires:
            - orb-tools/lint
            - orb-tools/pack
      # Trigger an integration workflow to test the
      # dev:${CIRCLE_SHA1:0:7} version of your orb
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          context: orb-publishing
          requires:
            - orb-tools/publish-dev

  # This `integration-test_deploy` workflow will only run
  # when the run-integration-tests pipeline parameter is set to true.
  # It is meant to be triggered by the "trigger-integration-tests-workflow"
  # job, and run tests on <your orb>@dev:${CIRCLE_SHA1:0:7}.
  integration-test_deploy:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      # Run any integration tests defined within the `jobs` key.
      - integration-test-1-prep:
          context: orb-publishing
      - integration-test-1-actual:
          context: orb-publishing
          requires:
            - integration-test-1-prep
      - integration-test-2-prep:
          context: orb-publishing
      - integration-test-2-actual:
          context: orb-publishing
          requires:
            - integration-test-2-prep
      # Publish a semver version of the orb. relies on
      # the commit subject containing the text "[semver:patch|minor|major|skip]"
      # as that will determine whether a patch, minor or major
      # version will be published or if publishing should
      # be skipped.
      # e.g. [semver:patch] will cause a patch version to be published.
      - orb-tools/dev-promote-prod-from-commit-subject:
          orb-name: indeni/cloudrail
          context: orb-publishing
          add-pr-comment: false
          fail-if-semver-not-indicated: true
          publish-version-tag: false
          requires:
            - integration-test-1-actual
            - integration-test-2-actual
          filters:
            branches:
              only:
                - main
